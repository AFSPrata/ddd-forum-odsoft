plugins {
    id "com.github.node-gradle.node" version "7.0.0"
    id 'java'
}

node {
    version = '12.22.12'
    npmVersion = '6.14.16'
    download = true
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.sourceforge.plantuml:plantuml:1.2021.8'
}

task copyEnv(type: Copy) {
    from '/'
  
    include '.env.template'
    
    into '/build'

    rename { String fileName ->
        fileName.replace('.template', '')
    }

    doLast {
        copy {
            from "$buildDir/.env"
            into '.'
        }

        delete "$buildDir/.env"
    }
}

task buildProject(type: Exec) {
    dependsOn npmInstall
    
    def envfile = file('.env')
    if (!envfile.exists()) {
      dependsOn copyEnv
    }

    delete 'dist'

    commandLine 'node', 'node_modules/typescript/bin/tsc'
}

task copyFiles(type: Copy) {
    dependsOn buildProject

    outputs.upToDateWhen { false }

    from('dist') {
        include '**/*.js'
        exclude '**/*.js.map'
    }
    into 'copiedJSFiles'

    includeEmptyDirs = false

    eachFile { details ->
        def path = details.path
        details.path = path.replaceAll('/', '_')
    }

    doLast {
        println 'Copied files!'
    }
}

task generateJSDoc(type: Exec) {
    dependsOn copyFiles

    delete 'docs/jsdoc'

    commandLine 'node', 'node_modules/jsdoc/jsdoc.js', '-c', 'jsdoc.json'

    doLast {
      println 'JSDoc Generated!'

      delete 'copiedJSFiles'
    }
}

task sequelize(type: Exec) {
    def envfile = file('.env')

    if (envfile.exists()) {
      file(envfile).readLines().each() {
          def (key, value) = it.tokenize('=')
          environment key, value
      }
    }

    environment 'NODE_ENV', 'development'

    commandLine 'node', 'node_modules/sequelize-cli/lib/sequelize', 'db:migrate'
}

task runAPITests(type: Exec) {
    dependsOn buildProject

    environment 'VARNODE_ENV', 'development'

    commandLine 'node', 'scripts/db/delete.js'

    environment 'NODE_ENV', 'development'

    commandLine 'node', 'scripts/db/create.js'
    
    dependsOn sequelize
}

task runAPITestsWithoutCoverage(type: Exec) {
    dependsOn runAPITests

    commandLine 'node', 'node_modules/jest/bin/jest.js', '--runInBand', '--testPathPattern', 'api'
}

task runApiTestWithCoverage(type: Exec) {
    dependsOn runAPITests

    commandLine 'node', 'node_modules/jest/bin/jest.js', '--coverage', '--coverageReporters', 'text', 'html', 'json', '--coverageDirectory', './docs/reports/api', '--runInBand', '--testPathPattern', 'api'
}

task runUnitTestWithoutCoverage(type: Exec) {
    dependsOn buildProject

    commandLine 'node', 'node_modules/jest/bin/jest.js'
}

task runUnitTestWithCoverage(type: Exec) {
    dependsOn buildProject

    commandLine 'node', 'node_modules/jest/bin/jest.js', '--coverage', '--coverageReporters', '--coverageDirectory', './docs/reports/unit', 'text', 'html', 'json' 
}

task generatePUMLDiagrams(type: JavaExec) {
    // Set the classpath for the PlantUML generator
    classpath = sourceSets.main.runtimeClasspath

    // Set the main class for the PlantUML generator
    mainClass = 'net.sourceforge.plantuml.Run'

    // Set the input and output directories for the diagrams
    def inputDir = file('scripts/plantUML')
    def outputDir = file('images')

    // Set the arguments for the PlantUML generator
    args = ['-tpng', '-o', outputDir, inputDir]
}