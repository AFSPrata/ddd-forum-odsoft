plugins {
  id "com.github.node-gradle.node" version "7.0.0"
  id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.sourceforge.plantuml:plantuml:1.2021.8'
}

task buildProject(type: NodeTask) {
  script = file('scripts/gradle/build.js')
}

task copyFiles(type: Copy) {
    from('dist') {
        include '**/*.js'
        exclude '**/*.js.map'
    }
    into 'copiedJSFiles'

    includeEmptyDirs = false

    eachFile { details ->
        def path = details.path
        details.path = path.replaceAll('/', '_')
    }

    doLast {
        println 'Copied files!'
    }
}

task generateJSDoc(type: Exec) {
  dependsOn copyFiles
  
  commandLine 'node', 'scripts/gradle/generateJSDoc.js'

  doLast {
    println 'JSDoc Generated!'

    delete 'copiedJSFiles'
  }
}

task runAPITests(type: Exec) {
  commandLine 'node', 'scripts/gradle/runAPITests.js'

  doLast {
    println 'API Tests executed!'
  }
}

task runUnitTest(type: Exec) {
  commandLine 'node', 'scripts/gradle/runUnitTests.js'

  doLast {
    println 'Unit Tests executed!'
  }
}

task generateUnitTestCoverageReport(type: Exec) {
  commandLine 'node', 'scripts/gradle/generateUnitTestCoverageReport.js'

  doLast {
    println 'Unit Test Coverage Report Generated!'
  }
}

task generateApiTestCoverageReport(type: Exec) {
  commandLine 'node', 'scripts/gradle/generateApiTestCoverageReport.js'

  doLast {
    println 'Api Test Coverage Report Generated!'
  }
}

task generatePUMLDiagrams(type: JavaExec) {
  // Set the classpath for the PlantUML generator
  classpath = sourceSets.main.runtimeClasspath

  // Set the main class for the PlantUML generator
  main = 'net.sourceforge.plantuml.Run'

  // Set the input and output directories for the diagrams
  def inputDir = file('scripts/plantUML')
  def outputDir = file('images')

  // Set the arguments for the PlantUML generator
  args = ['-tpng', '-o', outputDir, inputDir]
}